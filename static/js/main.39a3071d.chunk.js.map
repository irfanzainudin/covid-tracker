{"version":3,"sources":["components/NavBar.js","components/SummaryCard.js","components/SummaryList.js","components/USA.js","components/Malaysia.js","components/About.js","components/NoMatchPage.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["NavBar","className","to","SummaryCard","k","value","charAt","toUpperCase","substring","SummaryList","data","Object","keys","map","USA","useState","statesData","setStatesData","selectedState","setSelectedState","casesTotal","setCasesTotal","deaths","setDeaths","recovered","setRecovered","activeCases","setActiveCases","tests","setTests","population","setPopulation","useEffect","a","axios","result","fetchStatesData","title","width","document","documentElement","clientWidth","height","clientHeight","onClick","event","target","textContent","state","localeCompare","cases","active","Malaysia","About","NoMatchPage","App","setData","fetchData","exact","path","component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+RAGe,SAASA,IACtB,OACE,sBAAKC,UAAU,SAAf,UACE,cAAC,IAAD,CAAMA,UAAU,cAAcC,GAAG,iBAAjC,SAAkD,uCAClD,cAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,qBAAjC,SAAsD,sCACtD,cAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,0BAAjC,SAA2D,2CAC3D,cAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,uBAAjC,SAAwD,2CCP/C,SAASC,EAAT,GAAoC,IAAbC,EAAY,EAAZA,EAAGC,EAAS,EAATA,MACvC,OACE,sBAAKJ,UAAU,cAAf,UACE,qBAAKA,UAAU,sBAAf,SACE,4BAAKG,EAAEE,OAAO,GAAGC,cAAgBH,EAAEI,UAAU,OAE/C,qBAAKP,UAAU,oBAAf,SACE,6BAAMI,SCNC,SAASI,EAAT,GAAgC,IAATC,EAAQ,EAARA,KACpC,OACE,gCACE,2CAEEC,OAAOC,KAAKF,GAAMG,KAAI,SAACT,GACrB,OACE,qBAAKH,UAAU,cAAf,SACE,cAACE,EAAD,CAAaC,EAAGA,EAAGC,MAAOK,EAAKN,a,qBCP9B,SAASU,IAAO,IAAD,EACQC,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,OAEcF,mBAAS,gBAFvB,mBAErBG,EAFqB,KAENC,EAFM,OAGQJ,mBAAS,GAHjB,mBAGrBK,EAHqB,KAGTC,EAHS,OAIAN,mBAAS,GAJT,mBAIrBO,EAJqB,KAIbC,EAJa,OAKMR,mBAAS,GALf,mBAKrBS,EALqB,KAKVC,EALU,OAMUV,mBAAS,GANnB,mBAMrBW,EANqB,KAMRC,EANQ,OAOFZ,mBAAS,GAPP,mBAOrBa,EAPqB,KAOdC,EAPc,OAQQd,mBAAS,GARjB,mBAQrBe,EARqB,KAQTC,EARS,KAU5BC,qBAAU,YACa,uCAAG,4BAAAC,EAAA,sEACDC,IAAM,yCADL,OAChBC,EADgB,OAEtBlB,EAAckB,EAAOzB,MAFC,2CAAH,qDAKrB0B,KACC,IA2CH,OACE,gCAEE,0DACA,6BAAMlB,GAAiB,kBACvB,gCACE,sBAAKjB,UAAU,qBAAf,UACE,uBAAMA,UAAU,WAAhB,oBAAoCmB,GAAc,OAClD,uBAAMnB,UAAU,WAAhB,qBAAqCyB,GAAe,UAEtD,sBAAKzB,UAAU,qBAAf,UACE,uBAAMA,UAAU,WAAhB,wBAAwCuB,GAAa,OACrD,uBAAMvB,UAAU,WAAhB,qBAAqCqB,GAAU,UAEjD,sBAAKrB,UAAU,qBAAf,UACE,uBAAMA,UAAU,WAAhB,yBAAyC6B,GAAc,OACvD,uBAAM7B,UAAU,WAAhB,oBAAoC2B,GAAS,aAGjD,cAAC,IAAD,CAEES,MAAM,MACNC,MAAOC,SAASC,gBAAgBC,YAChCC,OAAQH,SAASC,gBAAgBG,aACjCC,QAjEa,SAACC,GAClB1B,EAAiB0B,EAAMC,OAAOC,aAC9B/B,EAAWH,KAAI,SAAAmC,GACmC,GAA5CA,EAAMA,MAAMC,cAAc/B,KAC5BG,EAAc2B,EAAME,OACpB3B,EAAUyB,EAAM1B,QAChBG,EAAauB,EAAMxB,WACnBG,EAAeqB,EAAMG,QACrBtB,EAASmB,EAAMpB,OACfG,EAAciB,EAAMlB,sBC9Bb,SAASsB,IACpB,OACI,0CCFO,SAASC,IACpB,OACI,gDCFO,SAASC,IACtB,OACE,wDCwCWC,MAhCf,WAAgB,IAAD,EACWxC,mBAAS,IADpB,mBACNL,EADM,KACA8C,EADA,KAYb,OATAxB,qBAAU,YACO,uCAAG,4BAAAC,EAAA,sEACKC,IAAM,sCADX,OACVC,EADU,OAEhBqB,EAAQrB,EAAOzB,MAFC,2CAAH,qDAKf+C,KACC,IAGD,cAAC,IAAD,UACE,sBAAKxD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,kDACA,cAACD,EAAD,OAGF,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0D,OAAK,EAACC,KAAK,iBAAiBC,UAAW,WAAQ,OAAO,cAACnD,EAAD,CAAaC,KAAMA,OAChF,cAAC,IAAD,CAAOiD,KAAK,qBAAqBC,UAAW9C,IAC5C,cAAC,IAAD,CAAO6C,KAAK,0BAA0BC,UAAWR,IACjD,cAAC,IAAD,CAAOO,KAAK,uBAAuBC,UAAWP,IAC9C,cAAC,IAAD,CAAOM,KAAK,mBAAmBC,UAAWN,aCzBhCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASuC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BrB,M","file":"static/js/main.39a3071d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function NavBar() {\n  return (\n    <div className=\"NavBar\">\n      <Link className=\"NavBar-link\" to=\"/covid-tracker\"><b>Home</b></Link>\n      <Link className=\"NavBar-link\" to=\"/covid-tracker/usa\"><b>USA</b></Link>\n      <Link className=\"NavBar-link\" to=\"/covid-tracker/malaysia\"><b>Malaysia</b></Link>\n      <Link className=\"NavBar-link\" to=\"/covid-tracker/about\"><b>About</b></Link>\n    </div>\n  )\n}","import React from 'react';\n\nexport default function SummaryCard({ k, value }) {\n  return (\n    <div className=\"SummaryCard\">\n      <div className=\"SummaryCards-header\">\n        <b>{ k.charAt(0).toUpperCase() + k.substring(1) }</b>\n      </div>\n      <div className=\"SummaryCards-body\">\n        <h1>{ value }</h1>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport SummaryCard from './SummaryCard';\n\nexport default function SummaryList({ data }) {\n  return (\n    <div>\n      <h1>Worldwide</h1>\n      {\n        Object.keys(data).map((k) => {\n          return (\n            <div className=\"SummaryList\">\n              <SummaryCard k={k} value={data[k]} />\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport USAMap from 'react-usa-map';\n\nexport default function USA() {\n  const [statesData, setStatesData] = useState([]);\n  const [selectedState, setSelectedState] = useState(\"Pick a state\");\n  const [casesTotal, setCasesTotal] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [recovered, setRecovered] = useState(0);\n  const [activeCases, setActiveCases] = useState(0);\n  const [tests, setTests] = useState(0);\n  const [population, setPopulation] = useState(0);\n\n  useEffect(() => {\n    const fetchStatesData = async () => {\n      const result = await axios('https://disease.sh/v3/covid-19/states');\n      setStatesData(result.data);\n    }\n\n    fetchStatesData();\n  }, []);\n\n  const mapHandler = (event) => {\n    setSelectedState(event.target.textContent);\n    statesData.map(state => {\n      if (state.state.localeCompare(selectedState) == 0) {\n        setCasesTotal(state.cases);\n        setDeaths(state.deaths);\n        setRecovered(state.recovered);\n        setActiveCases(state.active);\n        setTests(state.tests);\n        setPopulation(state.population);\n      }\n    })\n  }\n\n  const statesCustomConfig = () => {\n    return {\n      \"WA\": {\n        fill: \"orange\"\n      },\n      \"OR\": {\n        fill: \"navy\"\n      },\n      \"CA\": {\n        fill: \"#cc0000\"\n      },\n      \"ID\": {\n        fill: \"#cc0000\"\n      },\n      \"NV\": {\n        fill: \"orange\"\n      },\n      \"NJ\": {\n        fill: \"navy\",\n        // clickHandler: (event) => console.log('Custom handler for NJ', event.target.dataset)\n      },\n      \"NY\": {\n        fill: \"#CC0000\"\n      }\n    }\n  }\n\n  return (\n    <div>\n      {/* TODO */}\n      <h1>United States of America</h1>\n      <h3>{ selectedState || \"Unknown state\" }</h3>\n      <div>\n        <div className=\"USA-stat-container\">\n          <span className=\"USA-stat\">Cases: { casesTotal || \"0\" }</span>\n          <span className=\"USA-stat\">Active: { activeCases || \"0\" }</span>\n        </div>\n        <div className=\"USA-stat-container\">\n          <span className=\"USA-stat\">Recovered: { recovered || \"0\" }</span>\n          <span className=\"USA-stat\">Deaths: { deaths || \"0\" }</span>\n        </div>\n        <div className=\"USA-stat-container\">\n          <span className=\"USA-stat\">Population: { population || \"0\" }</span>\n          <span className=\"USA-stat\">Tests: { tests || \"0\" }</span>\n        </div>\n      </div>\n      <USAMap\n        // customize={statesCustomConfig()}\n        title=\"USA\"\n        width={document.documentElement.clientWidth}\n        height={document.documentElement.clientHeight}\n        onClick={mapHandler}\n      />\n    </div>\n  )\n}","import React from 'react';\n\nexport default function Malaysia() {\n    return (\n        <h1>Malaysia</h1>\n    )\n}","import React from 'react';\n\nexport default function About() {\n    return (\n        <h1>About This App</h1>\n    )\n}","import React from 'react';\n\nexport default function NoMatchPage() {\n  return (\n    <h1>Nothing to see here...</h1>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\n\nimport NavBar from './components/NavBar';\nimport SummaryList from './components/SummaryList';\nimport USA from './components/USA';\nimport Malaysia from './components/Malaysia';\nimport About from './components/About';\nimport NoMatchPage from './components/NoMatchPage';\n\nfunction App() {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://disease.sh/v3/covid-19/all');\n      setData(result.data);\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>COVID-19 Tracker</h1>\n          <NavBar />\n        </header>\n        {/* <h3>Summary of COVID-19</h3> */}\n        <Switch>\n          <Route exact path=\"/covid-tracker\" component={() => { return <SummaryList data={data} /> }} />\n          <Route path=\"/covid-tracker/usa\" component={USA} />\n          <Route path=\"/covid-tracker/malaysia\" component={Malaysia} />\n          <Route path=\"/covid-tracker/about\" component={About} />\n          <Route path=\"/covid-tracker/*\" component={NoMatchPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}